kable(dim(procrastination_data), header = "Dimension of procrastination dataset",format='html')%>%
kable_styling(dim(procrastination_data),bootstrap_options='striped',full_width=FALSE)%>%
row_spec(row=1:dim(dim(procrastination_data))[1],bold=T,color='white',background='darkred')
frequencyOfRespondantsByGender <- as.data.frame(table(cleaned_data$Gender))
colnames(frequencyOfRespondantsByGender) <- c("Gender","Number of Participants")
kable(frequencyOfRespondantsByGender[order(-frequencyOfRespondantsByGender$`Number of Participants`),],row.names = FALSE,format='html')%>%
kable_styling(frequencyOfRespondantsByGender[order(-frequencyOfRespondantsByGender$`Number of Participants`),],bootstrap_options='striped',full_width=FALSE)%>%
row_spec(row=1:dim(frequencyOfRespondantsByGender[order(-frequencyOfRespondantsByGender$`Number of Participants`),])[1],bold=T,color='white',background='darkred')
frequencyOfRespondantsByGender <- as.data.frame(table(cleaned_data$Gender))
colnames(frequencyOfRespondantsByGender) <- c("Gender","Number of Participants")
kable(frequencyOfRespondantsByGender[order(-frequencyOfRespondantsByGender$`Number of Participants`),],row.names = FALSE,format='html')%>%
kable_styling(frequencyOfRespondantsByGender[order(-frequencyOfRespondantsByGender$`Number of Participants`),],bootstrap_options='striped',full_width=FALSE)%>%
row_spec(row=1:dim(frequencyOfRespondantsByGender[order(-frequencyOfRespondantsByGender$`Number of Participants`),])[1],bold=T,color='white',background=40)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(knitr)
library(rvest)
library(XML)
library(RCurl)
library(plyr)
library(stringr)
library(xtable)
library(kableExtra)
procrastination_data <- read.csv("Data/Procrastination.csv",stringsAsFactors = FALSE)
kable(dim(procrastination_data), header = "Dimension of procrastination dataset",format='html')%>%
kable_styling(dim(procrastination_data),bootstrap_options='striped',full_width=FALSE)
#a function that removes all of the periods from variable names and makes the name into Camel Case form.
camel <- function(x){ #function for camel case
capit <- function(x) paste0(toupper(substring(x, 1, 1)), substring(x, 2, nchar(x)))
sapply(strsplit(x, "\\."), function(x) paste(capit(x), collapse=""))
}
names(procrastination_data)<-camel(names(procrastination_data))
#a manual update of variable names that are too long or not descriptive.
procrastination_data<- rename(x=procrastination_data,replace=c("HowLongHaveYouHeldThisPositionYears"="ExpYears", "Edu"="Education",
"CountryOfResidence"="Country",
"ÏAge"="Age",
"HowLongHaveYouHeldThisPositionMonths"="ExpMonths",
"DoYouConsiderYourselfAProcrastinator"="SelfQuestion",
"NumberOfDaughters" = "Daughters",
"NumberOfSons" = "Sons",
"CurrentOccupation"="Job",
"CommunitySize"="Community",
"MaritalStatus"="Marital",
"DoOthersConsiderYouAProcrastinator"="OthQuestion",
"AnnualIncome"="Income"))
#This will rename the columns of the different questionnaires
colnames(procrastination_data)[grep(names(procrastination_data),pattern = "GP")] <- sprintf("GPQues%d",1:length(grep(names(procrastination_data),pattern = "GP")))
colnames(procrastination_data)[grep(names(procrastination_data),pattern = "AIP")] <- sprintf("AIPQues%d",1:length(grep(names(procrastination_data),pattern = "AIP")))
colnames(procrastination_data)[grep(names(procrastination_data),pattern = "SWLS")] <- sprintf("SWLSQues%d",1:length(grep(names(procrastination_data),pattern = "SWLS")))
colnames(procrastination_data)[grep(names(procrastination_data),pattern = "DP")] <- sprintf("DPQues%d",1:length(grep(names(procrastination_data),pattern = "DP")))
#Years of experience
#For years of experience any unrealistic value or null value is assigned
procrastination_data$ExpYears <-as.numeric(procrastination_data$ExpYears)
procrastination_data$ExpYears[procrastination_data$ExpYears==999 | is.na(procrastination_data$ExpYears)] <- 0
procrastination_data$ExpYears <- round(procrastination_data$ExpYears,digits=1)
#We are replacing mis identified
procrastination_data$Job[procrastination_data$Job=="0"] <- "NA"
#Any blank income is assigned a value of 0
procrastination_data$Income[is.na(procrastination_data$Income)] <- 0
procrastination_data$Sons[procrastination_data$Sons=="Male"] <- "1"
procrastination_data$Sons[procrastination_data$Sons=="Female"] <- "2"
#The Kids data is updated to only Yes or no
procrastination_data$Kids <- ifelse(grepl(procrastination_data$Kids,pattern = "Yes"),"Yes","No")
#We are truncating all values of age after the decimal
procrastination_data$Age <- trunc(procrastination_data$Age,digits=0)
#This is to replace all 0 values of Country with an empty string
procrastination_data$Country[procrastination_data$Country=="0"] <- "NA"
#Any blank answers in the procrastination questionnaires are assigned a Yes value
procrastination_data$OthQuestion[procrastination_data$OthQuestion==""] <- "NA"
procrastination_data$SelfQuestion[procrastination_data$SelfQuestion==""] <- "NA"
procrastination_data$SelfQuestion[procrastination_data$SelfQuestion == '0'] <- "NA"
procrastination_data$SelfQuestion[procrastination_data$SelfQuestion == '4'] <- "NA"
#Here we are greping all of the variables with certain criteria in their names and creating a new variable of the mean of variables
procrastination_data$GPMean <- rowMeans(procrastination_data[,grep(names(procrastination_data),pattern = "GP")])
procrastination_data$AIPMean <- rowMeans(procrastination_data[,grep(names(procrastination_data),pattern = "AIP")])
procrastination_data$SWLSMean <- rowMeans(procrastination_data[,grep(names(procrastination_data),pattern = "SWLS")])
procrastination_data$DPMean <- rowMeans(procrastination_data[,grep(names(procrastination_data),pattern = "DP")])
#We are rounding the characters to only 1 digit after the decimal
procrastination_data$GPMean <- round(procrastination_data$GPMean,digits=1)
procrastination_data$AIPMean <- round(procrastination_data$AIPMean,digits=1)
camelpreserve <- function(x){ #function for camel case
capit <- function(temp_x) {
temp_x<-tolower(temp_x)
paste0(toupper(substring(temp_x, 1, 1)), substring(temp_x, 2, nchar(temp_x)))
}
capit2 <- function(temp_x) {
paste0(toupper(substring(temp_x, 1, 1)), substring(temp_x, 2, nchar(temp_x)))
}
x2<-sapply(strsplit(x, "[ ]+"), function(x) paste(capit(x), collapse=" "))
sapply(strsplit(x2, "\\-"), function(x2) paste(capit2(x2), collapse="-"))
}
#Any job title where the person filled in please specify is made into an empty string.
procrastination_data$Job[grep(procrastination_data$Job,pattern = "please specify")] <- "NA"
#All students are titled as student. As well if someone put their work status as Student then their occupation was updated to student
procrastination_data$Job[grep(procrastination_data$WorkStatus,pattern = "[sS]tudent")] <- "Student"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[sS]tudent")] <- "Student"
#These are statements to make professional job titles more general, i.e. yoga teacher and ESL teacher were simplified to teacher
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[tT]eacher")] <- "Teacher"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[wW]riter")] <- "Writer"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "RN|[nN]urse|LPN|PCA")] <- "Nurse"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[cC][ ]*[eE][ ]*[oO]|[Cc]hief")] <- "Executive"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "IT|[Nn]etwork")] <- "Information Technology"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[dD]octor|[mM][dD]")] <- "Doctor"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[sS]ales")] <- "Sales"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[Aa]cademic")] <- "Academic"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[Pp]roducer")] <- "Producer"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[Ss]upervis")] <- "Supervisor"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[Dd]esigner")] <- "Designer"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[Ff]inanc|[Bb]ank")] <- "Finance"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[Ss]oftware")] <- "Software Developer"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "houswife|\\Shome|^home")] <- "Homemaker"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[Ee]ngineer")] <- "Engineer"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[Rr]eal [Ee]state")] <- "Real Estate"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[Aa]dmin")] <- "Administration"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[Aa]nalyst")] <- "Analyst"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[Aa]rt")] <- "Art"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[Aa]ssist")] <- "Assistant"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[Aa]ttor")] <- "Attorney"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[Bb]usiness")] <- "Business"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[Cc]linical")] <- "Clinical"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[Cc]ommunications")] <- "Communication"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[Cc]omputer")] <- "Computer"
procrastination_data$Job[procrastination_data$Job==""] <- "NA"
#Everyone with a job status of Unemployed with a blank occupation is assigned the value Unemployed for their occupation
procrastination_data$Job[procrastination_data$WorkStatus=="unemployed"& procrastination_data$Job==""] <- "Unemployed"
#All Job titles under 5 characters were made to an empty string
procrastination_data$Job[nchar(procrastination_data$Job)<5] <- ""
procrastination_data$Job[procrastination_data$Job==""] <- "NA"
#All jobs with a slash(/) had all text after the slash removed
procrastination_data$Job<-sub("\\s*/.*", "", procrastination_data$Job)
#All jobs with parantheses had the parantheses removed
procrastination_data$Job<-sub("\\s*\\(.*", "", procrastination_data$Job)
#All jobs with leading and trailing white space were trimmed
procrastination_data$Job<-gsub("^\\s+|\\s+$", "", procrastination_data$Job)
procrastination_data$Job<-camelpreserve(procrastination_data$Job)
procrastination_data$Job[procrastination_data$Job==""] <- "NA"
procrastination_data$Gender[procrastination_data$Gender ==""] <- "NA"
procrastination_data$WorkStatus[procrastination_data$WorkStatus ==""] <- "NA"
#This is a function to combine multiple tables of scraped data that share a similar category
bindData <- function(firstframe,dataset,category){
#Here we are assigning the columns we need to some temporary variables and renaming the columns
working_temp <- dataset[[firstframe]][2:nrow(dataset[[firstframe]]),c(3,4)]
names(working_temp)<-c("Country","HDI")
working_temp1 <- dataset[[firstframe+1]][2:nrow(dataset[[firstframe+1]]),c(3,4)]
names(working_temp1)<-c("Country","HDI")
#We are binding the rows of our two temp variables and adding the Category value.
working_temp<-rbind(working_temp,working_temp1)
working_temp<-cbind(working_temp,"Category"=category)
}
url <- "https://en.wikipedia.org/wiki/List_of_countries_by_Human_Development_Index"
HDI_table <- url %>%
read_html() %>%
html_nodes("table")%>%
html_table(fill=TRUE)
HDI <- data.frame("Country","HDI","Category")
HDI<-rbind(bindData(4,HDI_table,"Very high human development"),
bindData(7,HDI_table,"High human development"),
bindData(10,HDI_table,"Medium human development"),
bindData(13,HDI_table,"Low human development"))
#We are doing a left merge of the procrastination data on the HDI data pulled from wikipedia. This means that if there is a missing country value from the procrastination data we will still bring that data over with missing HDI information.
merged_data<-merge(x=procrastination_data,y=HDI,by="Country",all.x=TRUE)
cleaned_data <- merged_data[merged_data$Age>18 & !is.na(merged_data$Age),]
# make columns into proper data types
cleaned_data$Sons <- as.numeric(cleaned_data$Sons)
cleaned_data$HDI <- as.numeric(cleaned_data$HDI )
agesummary <- summary(cleaned_data$Age)
incomesummary <-summary(cleaned_data$Income)
HDIsummary <- summary(cleaned_data$HDI)
agesummary
incomesummary
HDIsummary
meanGPsummary <- summary(cleaned_data$GPMean)
meanAIPSsummary <-summary(cleaned_data$AIPMean)
meanSWLsummary <-summary(cleaned_data$SWLSMean)
meanDPsummary <- summary(cleaned_data$DPMean)
meanGPsummary
meanAIPSsummary
meanSWLsummary
meanDPsummary
#histogram of age
qplot(cleaned_data$Age,
geom="histogram",
binwidth = 10,
main = "Histogram for Age",
xlab = "Age",
fill=I("light blue"),
col=I("red"))+
theme(plot.title=element_text(hjust = .5), axis.ticks.y=element_blank(),axis.ticks.x=element_blank()) +
theme(axis.text.x = element_text(angle=60,hjust=1))
#histogram of mean GP
qplot(cleaned_data$GPMean,
geom="histogram",
binwidth = 0.5,
main = "Histogram for Mean GP",
xlab = "Mean GP Score",
fill=I("light blue"),
col=I("red"))+
theme(plot.title=element_text(hjust = .5), axis.ticks.y=element_blank(),axis.ticks.x=element_blank()) +
theme(axis.text.x = element_text(angle=60,hjust=1))
frequencyOfRespondantsByGender <- as.data.frame(table(cleaned_data$Gender))
colnames(frequencyOfRespondantsByGender) <- c("Gender","Number of Participants")
kable(frequencyOfRespondantsByGender[order(-frequencyOfRespondantsByGender$`Number of Participants`),],row.names = FALSE,format='html')%>%
kable_styling(frequencyOfRespondantsByGender[order(-frequencyOfRespondantsByGender$`Number of Participants`),],bootstrap_options='striped',full_width=FALSE)
frequencyOfRespondantsByWork <- as.data.frame(table(cleaned_data$WorkStatus))
colnames(frequencyOfRespondantsByWork) <- c("Work","Number of Participants")
kable(frequencyOfRespondantsByWork[order(-frequencyOfRespondantsByWork$`Number of Participants`),],row.names = FALSE,format = 'html')%>%
kable_styling(frequencyOfRespondantsByWork[order(-frequencyOfRespondantsByWork$`Number of Participants`),],bootstrap_options='striped',full_width=FALSE)
frequencyOfRespondantsByJob<- as.data.frame(table(cleaned_data$Job))
colnames(frequencyOfRespondantsByJob) <- c("Job","Number of Participants")
kable(head(frequencyOfRespondantsByJob[order(-frequencyOfRespondantsByJob$`Number of Participants`),],20),row.names = FALSE,format = 'html')%>%
kable_styling(head(frequencyOfRespondantsByJob[order(-frequencyOfRespondantsByJob$`Number of Participants`),],20),bootstrap_options='striped',full_width=FALSE)
cleaned_data$Country[cleaned_data$Country==""] <- "NA"
frequencyOfRespondantsByCountry <- as.data.frame(table(cleaned_data$Country))
colnames(frequencyOfRespondantsByCountry) <- c("Country","Number of Participants")
kable(head(frequencyOfRespondantsByCountry[order(-frequencyOfRespondantsByCountry$`Number of Participants`),],20),row.names = FALSE,format = 'html')%>%
kable_styling(head(frequencyOfRespondantsByJob[order(-frequencyOfRespondantsByJob$`Number of Participants`),],20),bootstrap_options='striped',full_width=FALSE)
cleaned_data$matching <- ifelse(cleaned_data$SelfQuestion ==cleaned_data$OthQuestion,1,0)
matched <-sum(cleaned_data$matching)
matched
top15 <- aggregate(cleaned_data$GPMean,list(cleaned_data$Country),mean)
names(top15) <- c("Country", "GPMean")
merged15 <- merge(x=top15,y=HDI,by='Country',all.x =TRUE)
merged15$GPMean <- round(merged15$GPMean,3)
merged15<- merged15[with(merged15,order(-GPMean)),]
merged15 <- merged15[1:15,]
kable(merged15,row.names = FALSE,format = 'html')%>%
kable_styling(merged15,bootstrap_options='striped',full_width=FALSE)
ggplot(merged15, aes(reorder(Country, GPMean),GPMean)) +
geom_bar(stat="identity", aes(fill=Category))+  scale_fill_hue(h = c(5, 100)) +
ggtitle('Top 15 Nations In Average Procrastination Scores(GP)')+
ylab('Average Procrastination Scores(GP)')+
xlab('Country')+
theme(plot.title=element_text(hjust = .5), axis.ticks.y=element_blank(),axis.ticks.x=element_blank()) +
theme(axis.text.x = element_text(angle=60,hjust=1))
AIPtop15 <- aggregate(cleaned_data$AIPMean,list(cleaned_data$Country),mean)
names(AIPtop15) <- c("Country", "AIPMean")
AIPmerged15 <- merge(x=AIPtop15,y=HDI,by='Country',all.x =TRUE)
AIPmerged15$AIPMean <- round(AIPmerged15$AIPMean,3)
AIPmerged15<- AIPmerged15[with(AIPmerged15,order(-AIPMean)),]
AIPmerged15<- AIPmerged15[1:15,]
kable(AIPmerged15,row.names = FALSE,format = "html")%>%
kable_styling(AIPmerged15,bootstrap_options='striped',full_width=FALSE)
ggplot(AIPmerged15, aes(reorder(Country, AIPMean),AIPMean)) +
geom_bar(stat="identity", aes(fill=Category))+  scale_fill_hue(h = c(5, 100)) +
ggtitle('Top 15 Nations In Average Procrastination Scores(AIP)')+
ylab('Average Procrastination Scores(AIP)')+
xlab('Country')+
theme(plot.title=element_text(hjust = .5), axis.ticks.y=element_blank(),axis.ticks.x=element_blank()) +
theme(axis.text.x = element_text(angle=60,hjust=1))
countrymatching<-intersect(merged15$Country,AIPmerged15$Country)
countrymatching <- data.frame(countrymatching)
names(countrymatching) <- c('Country/Region')
countrymatching
#scatter plot
ggplot(data=subset(cleaned_data,Gender=="Male"|Gender=="Female"), aes(Age, Income),color=Gender) + geom_jitter(aes(color=Gender)) +
scale_color_manual(breaks = c("Female", "Male", ""), values=c("red", "blue", "green")) +
geom_smooth(method='lm',mapping=aes(x=Age,y=Income,color=Gender))+
theme(plot.title=element_text(hjust = .5), axis.ticks.y=element_blank(),axis.ticks.x=element_blank()) +
theme(axis.text.x = element_text(angle=60,hjust=1))
#linear regression
AgeIncome <- lm(Income~Age,data = cleaned_data)
lmsummary <- summary(AgeIncome)
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(AgeIncome)
#scatter plot
ggplot(data=subset(cleaned_data,Gender=="Male"|Gender=="Female"), aes(HDI, SWLSMean),color=Gender) + geom_jitter(aes(color=Gender),na.rm = TRUE) +
scale_color_manual(breaks = c("Female", "Male", ""), values=c("red", "blue", "green")) +
geom_smooth(method='lm',mapping=aes(x=HDI,y=SWLSMean,color=Gender),na.rm = TRUE)+
theme(plot.title=element_text(hjust = .5), axis.ticks.y=element_blank(),axis.ticks.x=element_blank()) +
theme(axis.text.x = element_text(angle=60,hjust=1))
#scatter plot of HDI category
ggplot(cleaned_data, aes(Category, SWLSMean)) +
geom_bar(stat="identity", aes(fill=Category))+  scale_fill_hue(h = c(5, 100)) +
ylab('Life Satisfaction Mean Score')+
xlab('HDI Category')+
theme(plot.title=element_text(hjust = .5), axis.ticks.y=element_blank(),axis.ticks.x=element_blank()) +
theme(axis.text.x = element_text(angle=60,hjust=1))
HDIout <- write.csv(HDI, "../Output/HDI.csv", row.names=FALSE)
cleaned_data <- write.csv(cleaned_data, "../Output/cleaned_data.csv", row.names=FALSE)
top15GP <- write.csv(merged15, "../Output/GP15.csv", row.names=FALSE)
top15AIP <- write.csv(AIPmerged15, "../Output/AIP15.csv", row.names=FALSE)
View(procrastination_data)
cleaned_data$matching <- ifelse(cleaned_data$SelfQuestion[cleaned_data$SelfQuestion='yes']& cleaned_data$[cleaned_data$SelfQuestion='yes'] ==cleaned_data$OthQuestion[cleaned_data$SelfQuestion='yes'],1,0)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(knitr)
library(rvest)
library(XML)
library(RCurl)
library(plyr)
library(stringr)
library(xtable)
library(kableExtra)
procrastination_data <- read.csv("Data/Procrastination.csv",stringsAsFactors = FALSE)
kable(dim(procrastination_data), header = "Dimension of procrastination dataset",format='html')%>%
kable_styling(dim(procrastination_data),bootstrap_options='striped',full_width=FALSE)
#a function that removes all of the periods from variable names and makes the name into Camel Case form.
camel <- function(x){ #function for camel case
capit <- function(x) paste0(toupper(substring(x, 1, 1)), substring(x, 2, nchar(x)))
sapply(strsplit(x, "\\."), function(x) paste(capit(x), collapse=""))
}
names(procrastination_data)<-camel(names(procrastination_data))
#a manual update of variable names that are too long or not descriptive.
procrastination_data<- rename(x=procrastination_data,replace=c("HowLongHaveYouHeldThisPositionYears"="ExpYears", "Edu"="Education",
"CountryOfResidence"="Country",
"ÏAge"="Age",
"HowLongHaveYouHeldThisPositionMonths"="ExpMonths",
"DoYouConsiderYourselfAProcrastinator"="SelfQuestion",
"NumberOfDaughters" = "Daughters",
"NumberOfSons" = "Sons",
"CurrentOccupation"="Job",
"CommunitySize"="Community",
"MaritalStatus"="Marital",
"DoOthersConsiderYouAProcrastinator"="OthQuestion",
"AnnualIncome"="Income"))
#This will rename the columns of the different questionnaires
colnames(procrastination_data)[grep(names(procrastination_data),pattern = "GP")] <- sprintf("GPQues%d",1:length(grep(names(procrastination_data),pattern = "GP")))
colnames(procrastination_data)[grep(names(procrastination_data),pattern = "AIP")] <- sprintf("AIPQues%d",1:length(grep(names(procrastination_data),pattern = "AIP")))
colnames(procrastination_data)[grep(names(procrastination_data),pattern = "SWLS")] <- sprintf("SWLSQues%d",1:length(grep(names(procrastination_data),pattern = "SWLS")))
colnames(procrastination_data)[grep(names(procrastination_data),pattern = "DP")] <- sprintf("DPQues%d",1:length(grep(names(procrastination_data),pattern = "DP")))
#Years of experience
#For years of experience any unrealistic value or null value is assigned
procrastination_data$ExpYears <-as.numeric(procrastination_data$ExpYears)
procrastination_data$ExpYears[procrastination_data$ExpYears==999 | is.na(procrastination_data$ExpYears)] <- 0
procrastination_data$ExpYears <- round(procrastination_data$ExpYears,digits=1)
#We are replacing mis identified
procrastination_data$Job[procrastination_data$Job=="0"] <- "NA"
#Any blank income is assigned a value of 0
procrastination_data$Income[is.na(procrastination_data$Income)] <- 0
procrastination_data$Sons[procrastination_data$Sons=="Male"] <- "1"
procrastination_data$Sons[procrastination_data$Sons=="Female"] <- "2"
#The Kids data is updated to only Yes or no
procrastination_data$Kids <- ifelse(grepl(procrastination_data$Kids,pattern = "Yes"),"Yes","No")
#We are truncating all values of age after the decimal
procrastination_data$Age <- trunc(procrastination_data$Age,digits=0)
#This is to replace all 0 values of Country with an empty string
procrastination_data$Country[procrastination_data$Country=="0"] <- "NA"
#Here we are greping all of the variables with certain criteria in their names and creating a new variable of the mean of variables
procrastination_data$GPMean <- rowMeans(procrastination_data[,grep(names(procrastination_data),pattern = "GP")])
procrastination_data$AIPMean <- rowMeans(procrastination_data[,grep(names(procrastination_data),pattern = "AIP")])
procrastination_data$SWLSMean <- rowMeans(procrastination_data[,grep(names(procrastination_data),pattern = "SWLS")])
procrastination_data$DPMean <- rowMeans(procrastination_data[,grep(names(procrastination_data),pattern = "DP")])
#We are rounding the characters to only 1 digit after the decimal
procrastination_data$GPMean <- round(procrastination_data$GPMean,digits=1)
procrastination_data$AIPMean <- round(procrastination_data$AIPMean,digits=1)
camelpreserve <- function(x){ #function for camel case
capit <- function(temp_x) {
temp_x<-tolower(temp_x)
paste0(toupper(substring(temp_x, 1, 1)), substring(temp_x, 2, nchar(temp_x)))
}
capit2 <- function(temp_x) {
paste0(toupper(substring(temp_x, 1, 1)), substring(temp_x, 2, nchar(temp_x)))
}
x2<-sapply(strsplit(x, "[ ]+"), function(x) paste(capit(x), collapse=" "))
sapply(strsplit(x2, "\\-"), function(x2) paste(capit2(x2), collapse="-"))
}
#Any job title where the person filled in please specify is made into an empty string.
procrastination_data$Job[grep(procrastination_data$Job,pattern = "please specify")] <- "NA"
#All students are titled as student. As well if someone put their work status as Student then their occupation was updated to student
procrastination_data$Job[grep(procrastination_data$WorkStatus,pattern = "[sS]tudent")] <- "Student"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[sS]tudent")] <- "Student"
#These are statements to make professional job titles more general, i.e. yoga teacher and ESL teacher were simplified to teacher
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[tT]eacher")] <- "Teacher"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[wW]riter")] <- "Writer"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "RN|[nN]urse|LPN|PCA")] <- "Nurse"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[cC][ ]*[eE][ ]*[oO]|[Cc]hief")] <- "Executive"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "IT|[Nn]etwork")] <- "Information Technology"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[dD]octor|[mM][dD]")] <- "Doctor"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[sS]ales")] <- "Sales"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[Aa]cademic")] <- "Academic"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[Pp]roducer")] <- "Producer"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[Ss]upervis")] <- "Supervisor"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[Dd]esigner")] <- "Designer"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[Ff]inanc|[Bb]ank")] <- "Finance"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[Ss]oftware")] <- "Software Developer"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "houswife|\\Shome|^home")] <- "Homemaker"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[Ee]ngineer")] <- "Engineer"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[Rr]eal [Ee]state")] <- "Real Estate"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[Aa]dmin")] <- "Administration"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[Aa]nalyst")] <- "Analyst"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[Aa]rt")] <- "Art"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[Aa]ssist")] <- "Assistant"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[Aa]ttor")] <- "Attorney"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[Bb]usiness")] <- "Business"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[Cc]linical")] <- "Clinical"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[Cc]ommunications")] <- "Communication"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[Cc]omputer")] <- "Computer"
procrastination_data$Job[procrastination_data$Job==""] <- "NA"
#Everyone with a job status of Unemployed with a blank occupation is assigned the value Unemployed for their occupation
procrastination_data$Job[procrastination_data$WorkStatus=="unemployed"& procrastination_data$Job==""] <- "Unemployed"
#All Job titles under 5 characters were made to an empty string
procrastination_data$Job[nchar(procrastination_data$Job)<5] <- ""
procrastination_data$Job[procrastination_data$Job==""] <- "NA"
#All jobs with a slash(/) had all text after the slash removed
procrastination_data$Job<-sub("\\s*/.*", "", procrastination_data$Job)
#All jobs with parantheses had the parantheses removed
procrastination_data$Job<-sub("\\s*\\(.*", "", procrastination_data$Job)
#All jobs with leading and trailing white space were trimmed
procrastination_data$Job<-gsub("^\\s+|\\s+$", "", procrastination_data$Job)
procrastination_data$Job<-camelpreserve(procrastination_data$Job)
procrastination_data$Job[procrastination_data$Job==""] <- "NA"
procrastination_data$Gender[procrastination_data$Gender ==""] <- "NA"
procrastination_data$WorkStatus[procrastination_data$WorkStatus ==""] <- "NA"
#This is a function to combine multiple tables of scraped data that share a similar category
bindData <- function(firstframe,dataset,category){
#Here we are assigning the columns we need to some temporary variables and renaming the columns
working_temp <- dataset[[firstframe]][2:nrow(dataset[[firstframe]]),c(3,4)]
names(working_temp)<-c("Country","HDI")
working_temp1 <- dataset[[firstframe+1]][2:nrow(dataset[[firstframe+1]]),c(3,4)]
names(working_temp1)<-c("Country","HDI")
#We are binding the rows of our two temp variables and adding the Category value.
working_temp<-rbind(working_temp,working_temp1)
working_temp<-cbind(working_temp,"Category"=category)
}
url <- "https://en.wikipedia.org/wiki/List_of_countries_by_Human_Development_Index"
HDI_table <- url %>%
read_html() %>%
html_nodes("table")%>%
html_table(fill=TRUE)
HDI <- data.frame("Country","HDI","Category")
HDI<-rbind(bindData(4,HDI_table,"Very high human development"),
bindData(7,HDI_table,"High human development"),
bindData(10,HDI_table,"Medium human development"),
bindData(13,HDI_table,"Low human development"))
#We are doing a left merge of the procrastination data on the HDI data pulled from wikipedia. This means that if there is a missing country value from the procrastination data we will still bring that data over with missing HDI information.
merged_data<-merge(x=procrastination_data,y=HDI,by="Country",all.x=TRUE)
cleaned_data <- merged_data[merged_data$Age>18 & !is.na(merged_data$Age),]
# make columns into proper data types
cleaned_data$Sons <- as.numeric(cleaned_data$Sons)
cleaned_data$HDI <- as.numeric(cleaned_data$HDI )
agesummary <- summary(cleaned_data$Age)
incomesummary <-summary(cleaned_data$Income)
HDIsummary <- summary(cleaned_data$HDI)
agesummary
incomesummary
HDIsummary
meanGPsummary <- summary(cleaned_data$GPMean)
meanAIPSsummary <-summary(cleaned_data$AIPMean)
meanSWLsummary <-summary(cleaned_data$SWLSMean)
meanDPsummary <- summary(cleaned_data$DPMean)
meanGPsummary
meanAIPSsummary
meanSWLsummary
meanDPsummary
#histogram of age
qplot(cleaned_data$Age,
geom="histogram",
binwidth = 10,
main = "Histogram for Age",
xlab = "Age",
fill=I("light blue"),
col=I("red"))+
theme(plot.title=element_text(hjust = .5), axis.ticks.y=element_blank(),axis.ticks.x=element_blank()) +
theme(axis.text.x = element_text(angle=60,hjust=1))
#histogram of mean GP
qplot(cleaned_data$GPMean,
geom="histogram",
binwidth = 0.5,
main = "Histogram for Mean GP",
xlab = "Mean GP Score",
fill=I("light blue"),
col=I("red"))+
theme(plot.title=element_text(hjust = .5), axis.ticks.y=element_blank(),axis.ticks.x=element_blank()) +
theme(axis.text.x = element_text(angle=60,hjust=1))
frequencyOfRespondantsByGender <- as.data.frame(table(cleaned_data$Gender))
colnames(frequencyOfRespondantsByGender) <- c("Gender","Number of Participants")
kable(frequencyOfRespondantsByGender[order(-frequencyOfRespondantsByGender$`Number of Participants`),],row.names = FALSE,format='html')%>%
kable_styling(frequencyOfRespondantsByGender[order(-frequencyOfRespondantsByGender$`Number of Participants`),],bootstrap_options='striped',full_width=FALSE)
frequencyOfRespondantsByWork <- as.data.frame(table(cleaned_data$WorkStatus))
colnames(frequencyOfRespondantsByWork) <- c("Work","Number of Participants")
kable(frequencyOfRespondantsByWork[order(-frequencyOfRespondantsByWork$`Number of Participants`),],row.names = FALSE,format = 'html')%>%
kable_styling(frequencyOfRespondantsByWork[order(-frequencyOfRespondantsByWork$`Number of Participants`),],bootstrap_options='striped',full_width=FALSE)
frequencyOfRespondantsByJob<- as.data.frame(table(cleaned_data$Job))
colnames(frequencyOfRespondantsByJob) <- c("Job","Number of Participants")
kable(head(frequencyOfRespondantsByJob[order(-frequencyOfRespondantsByJob$`Number of Participants`),],20),row.names = FALSE,format = 'html')%>%
kable_styling(head(frequencyOfRespondantsByJob[order(-frequencyOfRespondantsByJob$`Number of Participants`),],20),bootstrap_options='striped',full_width=FALSE)
cleaned_data$Country[cleaned_data$Country==""] <- "NA"
frequencyOfRespondantsByCountry <- as.data.frame(table(cleaned_data$Country))
colnames(frequencyOfRespondantsByCountry) <- c("Country","Number of Participants")
kable(head(frequencyOfRespondantsByCountry[order(-frequencyOfRespondantsByCountry$`Number of Participants`),],20),row.names = FALSE,format = 'html')%>%
kable_styling(head(frequencyOfRespondantsByJob[order(-frequencyOfRespondantsByJob$`Number of Participants`),],20),bootstrap_options='striped',full_width=FALSE)
cleaned_data$matchingyes <- ifelse(cleaned_data$SelfQuestion[cleaned_data$SelfQuestion='yes']&cleaned_data$OthQuestion[cleaned_data$OthQuestion='yes'],1,0)
cleaned_data$matchingyes <- ifelse(cleaned_data$SelfQuestion[cleaned_data$SelfQuestion=='yes']&cleaned_data$OthQuestion[cleaned_data$OthQuestion=='yes'],1,0)
cleaned_data$matchingyes <- ifelse(cleaned_data$SelfQuestion=='yes'&cleaned_data$OthQuestion=='yes'],1,0)
cleaned_data$matchingyes <- ifelse(cleaned_data$SelfQuestion=='yes'&cleaned_data$OthQuestion=='yes',1,0)
matchedyes <-sum(cleaned_data$matchingyes)
cleaned_data$matchingno <- ifelse(cleaned_data$SelfQuestion[cleaned_data$SelfQuestion='no']&cleaned_data$OthQuestion[cleaned_data$OthQuestion='no'],1,0)
View(cleaned_data)
cleaned_data$matchingyes <- ifelse(cleaned_data$SelfQuestion=='yes'&cleaned_data$OthQuestion=='yes',1,0)
matchedyes <-sum(cleaned_data$matchingyes)
cleaned_data$matchingno <- ifelse(cleaned_data$SelfQuestion=='no'&cleaned_data$OthQuestion=='no',1,0)
matchedno <-sum(cleaned_data$matchingno)
cleaned_data$matchingyes <- ifelse(cleaned_data$SelfQuestion=='yes'&cleaned_data$OthQuestion=='yes',1,0)
matchedyes <-sum(cleaned_data$matchingyes)
matchedyes
cleaned_data$matchingno <- ifelse(cleaned_data$SelfQuestion=='no'&cleaned_data$OthQuestion=='no',1,0)
matchedno <-sum(cleaned_data$matchingno)
matchedyes
View(merged_data)
View(cleaned_data)
cleaned_data$matchingyes <- ifelse(cleaned_data$SelfQuestion=='yes'&cleaned_data$OthQuestion=='yes',1,0)
matchedyes <-sum(cleaned_data$matchingyes)
matchedyes
cleaned_data$matchingno <- ifelse(cleaned_data$SelfQuestion=='no'&cleaned_data$OthQuestion=='no',1,0)
matchedno <-sum(cleaned_data$matchingno)
matchedyes
cleaned_data$matchingyes <- ifelse(cleaned_data$SelfQuestion=='yes'&cleaned_data$OthQuestion=='yes',1,0)
matchedyes <-sum(cleaned_data$matchingyes)
matchedyes
cleaned_data$matchingno <- ifelse(cleaned_data$SelfQuestion=='no'&cleaned_data$OthQuestion=='no',1,0)
matchedno <-sum(cleaned_data$matchingno)
matchedno
