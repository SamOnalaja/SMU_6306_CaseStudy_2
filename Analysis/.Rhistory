View(procrastination_data)
View(procrastination_data)
View(procrastination_data)
View(procrastination_data)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(knitr)
library(rvest)
library(XML)
library(RCurl)
library(plyr)
library(stringr)
procrastination_data <- read.csv("Data/Procrastination.csv",stringsAsFactors = FALSE)
kable(dim(procrastination_data), header = "Dimension of procrastination dataset")
#a function that removes all of the periods from variable names and makes the name into Camel Case form.
camel <- function(x){ #function for camel case
capit <- function(x) paste0(toupper(substring(x, 1, 1)), substring(x, 2, nchar(x)))
sapply(strsplit(x, "\\."), function(x) paste(capit(x), collapse=""))
}
names(procrastination_data)<-camel(names(procrastination_data))
#a manual update of variable names that are too long or not descriptive.
procrastination_data<- rename(x=procrastination_data,replace=c("HowLongHaveYouHeldThisPositionYears"="ExpYears", "Edu"="Education",
"CountryOfResidence"="Country",
"ÏAge"="Age",
"HowLongHaveYouHeldThisPositionMonths"="ExpMonths",
"DoYouConsiderYourselfAProcrastinator"="SelfQuestion",
"NumberOfDaughters" = "Daughters",
"NumberOfSons" = "Sons",
"CurrentOccupation"="Job",
"CommunitySize"="Community",
"MaritalStatus"="Marital",
"DoOthersConsiderYouAProcrastinator"="OthQuestion",
"AnnualIncome"="Income"))
#This will rename the columns of the different questionnaires
colnames(procrastination_data)[grep(names(procrastination_data),pattern = "GP")] <- sprintf("GPQues%d",1:length(grep(names(procrastination_data),pattern = "GP")))
colnames(procrastination_data)[grep(names(procrastination_data),pattern = "AIP")] <- sprintf("AIPQues%d",1:length(grep(names(procrastination_data),pattern = "AIP")))
colnames(procrastination_data)[grep(names(procrastination_data),pattern = "SWLS")] <- sprintf("SWLSQues%d",1:length(grep(names(procrastination_data),pattern = "SWLS")))
colnames(procrastination_data)[grep(names(procrastination_data),pattern = "DP")] <- sprintf("DPQues%d",1:length(grep(names(procrastination_data),pattern = "DP")))
#Years of experience
#For years of experience any unrealistic value or null value is assigned
procrastination_data$ExpYears <-as.numeric(procrastination_data$ExpYears)
procrastination_data$ExpYears[procrastination_data$ExpYears==999 | is.na(procrastination_data$ExpYears)] <- 0
procrastination_data$ExpYears <- round(procrastination_data$ExpYears,digits=1)
#We are replacing mis identified
procrastination_data$Job[procrastination_data$Job=="0"] <- ""
#Any blank income is assigned a value of 0
procrastination_data$Income[is.na(procrastination_data$Income)] <- 0
procrastination_data$Sons[procrastination_data$Sons=="Male"] <- "1"
procrastination_data$Sons[procrastination_data$Sons=="Female"] <- "2"
#We are truncating all values of age after the decimal
procrastination_data$Age <- trunc(procrastination_data$Age,digits=0)
#This is to replace all 0 values of Country with an empty string
procrastination_data$Country[procrastination_data$Country=="0"] <- ""
#Any blank answers in the procrastination questionnaires are assigned a Yes value
procrastination_data$OthQuestion[procrastination_data$OthQuestion==""] <- "Yes"
procrastination_data$SelfQuestion[procrastination_data$SelfQuestion==""] <- "Yes"
#Here we are greping all of the variables with certain criteria in their names and creating a new variable of the mean of variables
procrastination_data$GPMean <- rowMeans(procrastination_data[,grep(names(procrastination_data),pattern = "GP")])
procrastination_data$AIPMean <- rowMeans(procrastination_data[,grep(names(procrastination_data),pattern = "AIP")])
procrastination_data$SWLSMean <- rowMeans(procrastination_data[,grep(names(procrastination_data),pattern = "SWLS")])
procrastination_data$DPMean <- rowMeans(procrastination_data[,grep(names(procrastination_data),pattern = "DP")])
#We are rounding the characters to only 1 digit after the decimal
procrastination_data$GPMean <- round(procrastination_data$GPMean,digits=1)
procrastination_data$AIPMean <- round(procrastination_data$AIPMean,digits=1)
#Any job title where the person filled in please specify is made into an empty string.
procrastination_data$Job[grep(procrastination_data$Job,pattern = "please specify")] <- ""
#All students are titled as student. As well if someone put their work status as Student then their occupation was updated to student
procrastination_data$Job[grep(procrastination_data$WorkStatus,pattern = "[sS]tudent")] <- "Student"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[sS]tudent")] <- "Student"
#These are statements to make professional job titles more general, i.e. yoga teacher and ESL teacher were simplified to teacher
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[tT]eacher")] <- "Teacher"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[wW]riter")] <- "Writer"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "RN|[nN]urse|LPN|PCA")] <- "Nurse"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[cC][ ]*[eE][ ]*[oO]")] <- "Chief Executive"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "IT")] <- "Information Technology"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[dD]octor|[mM][dD]")] <- "Doctor"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[sS]ales")] <- "Sales"
#Everyone with a job status of Unemployed with a blank occupation is assigned the value Unemployed for their occupation
procrastination_data$Job[procrastination_data$WorkStatus=="unemployed"&procrastination_data$Job==""] <- "Unemployed"
#All Job titles under 5 characters were made to an empty string
procrastination_data$Job[nchar(procrastination_data$Job)<5] <- ""
#All jobs with a slash(/) had all text after the slash removed
procrastination_data$Job<-sub("\\s*/.*", "", procrastination_data$Job)
#All jobs with parantheses had the parantheses removed
procrastination_data$Job<-sub("\\s*\\(.*", "", procrastination_data$Job)
#All jobs with leading and trailing white space were trimmed
procrastination_data$Job<-gsub("^\\s+|\\s+$", "", procrastination_data$Job)
View(procrastination_data)
#The Kids data is updated to only Yes or no
procrastination_data$Kids <- ifelse(grepl(procrastination_data$Kids,pattern = "Yes"),"Yes","No")
View(procrastination_data)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(knitr)
library(rvest)
library(XML)
library(RCurl)
library(plyr)
library(stringr)
procrastination_data <- read.csv("Data/Procrastination.csv",stringsAsFactors = FALSE)
kable(dim(procrastination_data), header = "Dimension of procrastination dataset")
#a function that removes all of the periods from variable names and makes the name into Camel Case form.
camel <- function(x){ #function for camel case
capit <- function(x) paste0(toupper(substring(x, 1, 1)), substring(x, 2, nchar(x)))
sapply(strsplit(x, "\\."), function(x) paste(capit(x), collapse=""))
}
names(procrastination_data)<-camel(names(procrastination_data))
#a manual update of variable names that are too long or not descriptive.
procrastination_data<- rename(x=procrastination_data,replace=c("HowLongHaveYouHeldThisPositionYears"="ExpYears", "Edu"="Education",
"CountryOfResidence"="Country",
"ÏAge"="Age",
"HowLongHaveYouHeldThisPositionMonths"="ExpMonths",
"DoYouConsiderYourselfAProcrastinator"="SelfQuestion",
"NumberOfDaughters" = "Daughters",
"NumberOfSons" = "Sons",
"CurrentOccupation"="Job",
"CommunitySize"="Community",
"MaritalStatus"="Marital",
"DoOthersConsiderYouAProcrastinator"="OthQuestion",
"AnnualIncome"="Income"))
#This will rename the columns of the different questionnaires
colnames(procrastination_data)[grep(names(procrastination_data),pattern = "GP")] <- sprintf("GPQues%d",1:length(grep(names(procrastination_data),pattern = "GP")))
colnames(procrastination_data)[grep(names(procrastination_data),pattern = "AIP")] <- sprintf("AIPQues%d",1:length(grep(names(procrastination_data),pattern = "AIP")))
colnames(procrastination_data)[grep(names(procrastination_data),pattern = "SWLS")] <- sprintf("SWLSQues%d",1:length(grep(names(procrastination_data),pattern = "SWLS")))
colnames(procrastination_data)[grep(names(procrastination_data),pattern = "DP")] <- sprintf("DPQues%d",1:length(grep(names(procrastination_data),pattern = "DP")))
#Years of experience
#For years of experience any unrealistic value or null value is assigned
procrastination_data$ExpYears <-as.numeric(procrastination_data$ExpYears)
procrastination_data$ExpYears[procrastination_data$ExpYears==999 | is.na(procrastination_data$ExpYears)] <- 0
procrastination_data$ExpYears <- round(procrastination_data$ExpYears,digits=1)
#We are replacing mis identified
procrastination_data$Job[procrastination_data$Job=="0"] <- ""
#Any blank income is assigned a value of 0
procrastination_data$Income[is.na(procrastination_data$Income)] <- 0
procrastination_data$Sons[procrastination_data$Sons=="Male"] <- "1"
procrastination_data$Sons[procrastination_data$Sons=="Female"] <- "2"
#The Kids data is updated to only Yes or no
procrastination_data$Kids <- ifelse(grepl(procrastination_data$Kids,pattern = "Yes"),"Yes","No")
#We are truncating all values of age after the decimal
procrastination_data$Age <- trunc(procrastination_data$Age,digits=0)
#This is to replace all 0 values of Country with an empty string
procrastination_data$Country[procrastination_data$Country=="0"] <- ""
#Any blank answers in the procrastination questionnaires are assigned a Yes value
procrastination_data$OthQuestion[procrastination_data$OthQuestion==""] <- "Yes"
procrastination_data$SelfQuestion[procrastination_data$SelfQuestion==""] <- "Yes"
#Here we are greping all of the variables with certain criteria in their names and creating a new variable of the mean of variables
procrastination_data$GPMean <- rowMeans(procrastination_data[,grep(names(procrastination_data),pattern = "GP")])
procrastination_data$AIPMean <- rowMeans(procrastination_data[,grep(names(procrastination_data),pattern = "AIP")])
procrastination_data$SWLSMean <- rowMeans(procrastination_data[,grep(names(procrastination_data),pattern = "SWLS")])
procrastination_data$DPMean <- rowMeans(procrastination_data[,grep(names(procrastination_data),pattern = "DP")])
#We are rounding the characters to only 1 digit after the decimal
procrastination_data$GPMean <- round(procrastination_data$GPMean,digits=1)
procrastination_data$AIPMean <- round(procrastination_data$AIPMean,digits=1)
#Any job title where the person filled in please specify is made into an empty string.
procrastination_data$Job[grep(procrastination_data$Job,pattern = "please specify")] <- ""
#All students are titled as student. As well if someone put their work status as Student then their occupation was updated to student
procrastination_data$Job[grep(procrastination_data$WorkStatus,pattern = "[sS]tudent")] <- "Student"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[sS]tudent")] <- "Student"
#These are statements to make professional job titles more general, i.e. yoga teacher and ESL teacher were simplified to teacher
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[tT]eacher")] <- "Teacher"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[wW]riter")] <- "Writer"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "RN|[nN]urse|LPN|PCA")] <- "Nurse"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[cC][ ]*[eE][ ]*[oO]")] <- "Chief Executive"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "IT")] <- "Information Technology"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[dD]octor|[mM][dD]")] <- "Doctor"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[sS]ales")] <- "Sales"
#Everyone with a job status of Unemployed with a blank occupation is assigned the value Unemployed for their occupation
procrastination_data$Job[procrastination_data$WorkStatus=="unemployed"&procrastination_data$Job==""] <- "Unemployed"
#All Job titles under 5 characters were made to an empty string
procrastination_data$Job[nchar(procrastination_data$Job)<5] <- ""
#All jobs with a slash(/) had all text after the slash removed
procrastination_data$Job<-sub("\\s*/.*", "", procrastination_data$Job)
#All jobs with parantheses had the parantheses removed
procrastination_data$Job<-sub("\\s*\\(.*", "", procrastination_data$Job)
#All jobs with leading and trailing white space were trimmed
procrastination_data$Job<-gsub("^\\s+|\\s+$", "", procrastination_data$Job)
#This is a function to combine multiple tables of scraped data that share a similar category
bindData <- function(firstframe,dataset,category){
#Here we are assigning the columns we need to some temporary variables and renaming the columns
working_temp <- dataset[[firstframe]][2:nrow(dataset[[firstframe]]),c(3,4)]
names(working_temp)<-c("Country","HDI")
working_temp1 <- dataset[[firstframe+1]][2:nrow(dataset[[firstframe+1]]),c(3,4)]
names(working_temp1)<-c("Country","HDI")
#We are binding the rows of our two temp variables and adding the Category value.
working_temp<-rbind(working_temp,working_temp1)
working_temp<-cbind(working_temp,"Category"=category)
}
url <- "https://en.wikipedia.org/wiki/List_of_countries_by_Human_Development_Index"
HDI_table <- url %>%
read_html() %>%
html_nodes("table")%>%
html_table(fill=TRUE)
HDI <- data.frame("Country","HDI","Category")
HDI<-rbind(bindData(4,HDI_table,"Very high human development"),
bindData(7,HDI_table,"High human development"),
bindData(10,HDI_table,"Medium human development"),
bindData(13,HDI_table,"Low human development"))
#We are doing a left merge of the procrastination data on the HDI data pulled from wikipedia. This means that if there is a missing country value from the procrastination data we will still bring that data over with missing HDI information.
merged_data<-merge(x=procrastination_data,y=HDI,by="Country",all.x=TRUE)
cleaned_data <- merged_data[merged_data$Age>18 & !is.na(merged_data$Age),]
frequencyOfRespondantsByGender <- as.data.frame(table(cleaned_data$Gender))
colnames(frequencyOfRespondantsByGender) <- c("Gender","Number of Participants")
kable(frequencyOfRespondantsByGender[order(-frequencyOfRespondantsByGender$`Number of Participants`),],row.names = FALSE)
frequencyOfRespondantsByCountry <- as.data.frame(table(cleaned_data$Country))
colnames(frequencyOfRespondantsByCountry) <- c("Country","Number of Participants")
kable(frequencyOfRespondantsByCountry[order(-frequencyOfRespondantsByCountry$`Number of Participants`),],row.names = FALSE)
View(procrastination_data)
View(procrastination_data)
url <- "https://en.wikipedia.org/wiki/List_of_countries_by_Human_Development_Index"
HDI_table <- url %>%
read_html() %>%
html_nodes("table")%>%
html_table(fill=TRUE)
View(HDI)
read_html(https://en.wikipedia.org/wiki/List_of_countries_by_Human_Development_Index)
read_html('https://en.wikipedia.org/wiki/List_of_countries_by_Human_Development_Index')
html_nodes("table")
html_nodes(a, "table")
a <- read_html('https://en.wikipedia.org/wiki/List_of_countries_by_Human_Development_Index')
html_nodes(a, "table")
html_table(html_nodes(a, "table"),fill=TRUE)
View(HDI)
HDI_table
#This is a function to combine multiple tables of scraped data that share a similar category
bindData <- function(firstframe,dataset,category){
#Here we are assigning the columns we need to some temporary variables and renaming the columns
working_temp <- dataset[[firstframe]][2:nrow(dataset[[firstframe]]),c(3,4)]
names(working_temp)<-c("Country","HDI")
working_temp1 <- dataset[[firstframe+1]][2:nrow(dataset[[firstframe+1]]),c(3,4)]
names(working_temp1)<-c("Country","HDI")
#We are binding the rows of our two temp variables and adding the Category value.
working_temp<-rbind(working_temp,working_temp1)
working_temp<-cbind(working_temp,"Category"=category)
}
url <- "https://en.wikipedia.org/wiki/List_of_countries_by_Human_Development_Index"
HDI_table <- url %>%
read_html() %>%
html_nodes("table")%>%
html_table(fill=TRUE)
HDI <- data.frame("Country","HDI","Category")
HDI<-rbind(bindData(4,HDI_table,"Very high human development"),
bindData(7,HDI_table,"High human development"),
bindData(10,HDI_table,"Medium human development"),
bindData(13,HDI_table,"Low human development"))
attributes(HDI_table)
head(HDI_table)
data.frame(HDI_table)
str(HDI_table)
library(rvest)
url <- 'https://en.wikipedia.org/wiki/List_of_countries_by_Human_Development_Index'
page <- read_html(url)
library(rvest)
url <- 'https://en.wikipedia.org/wiki/List_of_countries_by_Human_Development_Index'
page <- read_html(url)
hp_table_veryhigh <-html_nodes(page, css = 'table.multicol')
hp <- html_table(hp_table_veryhigh)
hw<- data.frame(hp)
hp_table_veryhigh <-html_nodes(page, css = 'table.multicol')
hp <- html_table(hp_table_veryhigh,fill = TRUE)
hw<- data.frame(hp)
hp <- html_table(hp_table_veryhigh,fill = TRUE)
hw<- data.frame(hp)
hp_table_veryhigh <-html_nodes(page, css = 'table.wikitable')
hp <- html_table(hp_table_veryhigh,fill = TRUE)
hw<- data.frame(hp)
library(xml)
url <- 'https://en.wikipedia.org/wiki/List_of_countries_by_Human_Development_Index'
library(XML)
url <- 'https://en.wikipedia.org/wiki/List_of_countries_by_Human_Development_Index'
page <- read_html(url)
page <- readHTMLTable(url)
library(XML)
url <- 'https://en.wikipedia.org/wiki/List_of_countries_by_Human_Development_Index'
page <- readHTMLTable(url)
library(XML)
url <- 'https://en.wikipedia.org/wiki/List_of_countries_by_Human_Development_Index'
page <- readHTMLTable(page = url)
page <- readHTMLTable(url)
url <- 'http://en.wikipedia.org/wiki/List_of_countries_by_Human_Development_Index'
page <- readHTMLTable(url)
library(XML)
url <- 'http://en.wikipedia.org/wiki/List_of_countries_by_Human_Development_Index'
page <- readHTMLTable(url)
tables = readHTMLTable(url)
library(XML)
url <- 'https://en.wikipedia.org/wiki/List_of_countries_by_Human_Development_Index'
tables = readHTMLTable(url)
names(tables)
library(XML)
url <- 'https://en.wikipedia.org/wiki/List_of_countries_by_Human_Development_Index'
doc <- xmlTreeParse(url, useInternalNodes = TRUE)
tables = readHTMLTable(url)
library(XML)
url <- 'https://en.wikipedia.org/wiki/List_of_countries_by_Human_Development_Index'
html <- htmlParse(url)
sched <- readHTMLTable(html)
html <- htmlParse(url)
library(XML)
url <- 'http://en.wikipedia.org/wiki/List_of_countries_by_Human_Development_Index'
library(XML)
url <- 'http://en.wikipedia.org/wiki/List_of_countries_by_Human_Development_Index'
html <- htmlParse(url)
u <- "https://en.wikipedia.org/wiki/List_of_countries_by_Human_Development_Index"
tables<- readHTMLTable(u)
tables<- readHTMLTable(u)
page <- read_html(u)
library(rvest)
u <- "https://en.wikipedia.org/wiki/List_of_countries_by_Human_Development_Index"
page <- read_html(u)
hp_table <-html_nodes(page, css = 'table.wikitable')
hp <- html_table(hp_table)
hp <- html_table(hp_table,fill = TRUE)
hw9<- data.frame(hp)
hp <- html_table(hp_table,fill = TRUE)
class(hp)
hp[1]
hp[2]
veryhigh <- c(hp[1],hp[2])
data.frame(hp[1])
data.frame(hp[1])
a <- data.frame(hp[1])
View(a)
veryhigh1 <- data.frame(hp[1])
veryhigh2 <- data.frame(hp[2])
View(veryhigh2)
#This is a function to combine multiple tables of scraped data that share a similar category
bindData <- function(firstframe,dataset,category){
#Here we are assigning the columns we need to some temporary variables and renaming the columns
working_temp <- dataset[[firstframe]][2:nrow(dataset[[firstframe]]),c(3,4)]
names(working_temp)<-c("Country","HDI")
working_temp1 <- dataset[[firstframe+1]][2:nrow(dataset[[firstframe+1]]),c(3,4)]
names(working_temp1)<-c("Country","HDI")
#We are binding the rows of our two temp variables and adding the Category value.
working_temp<-rbind(working_temp,working_temp1)
working_temp<-cbind(working_temp,"Category"=category)
}
url <- "https://en.wikipedia.org/wiki/List_of_countries_by_Human_Development_Index"
HDI_table <- url %>%
read_html() %>%
html_nodes("table")%>%
html_table(fill=TRUE)
HDI <- data.frame("Country","HDI","Category")
HDI<-rbind(bindData(4,HDI_table,"Very high human development"),
bindData(7,HDI_table,"High human development"),
bindData(10,HDI_table,"Medium human development"),
bindData(13,HDI_table,"Low human development"))
hp <- html_table(hp_table,fill = TRUE)
hp[3]
#This is a function to combine multiple tables of scraped data that share a similar category
bindData <- function(firstframe,dataset,category){
#Here we are assigning the columns we need to some temporary variables and renaming the columns
working_temp <- dataset[[firstframe]][2:nrow(dataset[[firstframe]]),c(3,4)]
names(working_temp)<-c("Country","HDI")
working_temp1 <- dataset[[firstframe+1]][2:nrow(dataset[[firstframe+1]]),c(3,4)]
names(working_temp1)<-c("Country","HDI")
#We are binding the rows of our two temp variables and adding the Category value.
working_temp<-rbind(working_temp,working_temp1)
working_temp<-cbind(working_temp,"Category"=category)
}
url <- "https://en.wikipedia.org/wiki/List_of_countries_by_Human_Development_Index"
HDI_table <- url %>%
read_html() %>%
html_nodes("table.wikitable")%>%
html_table(fill=TRUE)
HDI <- data.frame("Country","HDI","Category")
HDI<-rbind(bindData(4,HDI_table,"Very high human development"),
bindData(7,HDI_table,"High human development"),
bindData(10,HDI_table,"Medium human development"),
bindData(13,HDI_table,"Low human development"))
View(HDI)
#This is a function to combine multiple tables of scraped data that share a similar category
bindData <- function(firstframe,dataset,category){
#Here we are assigning the columns we need to some temporary variables and renaming the columns
working_temp <- dataset[[firstframe]][2:nrow(dataset[[firstframe]]),c(3,4)]
names(working_temp)<-c("Country","HDI")
working_temp1 <- dataset[[firstframe+1]][2:nrow(dataset[[firstframe+1]]),c(3,4)]
names(working_temp1)<-c("Country","HDI")
#We are binding the rows of our two temp variables and adding the Category value.
working_temp<-rbind(working_temp,working_temp1)
working_temp<-cbind(working_temp,"Category"=category)
}
url <- "https://en.wikipedia.org/wiki/List_of_countries_by_Human_Development_Index"
HDI_table <- url %>%
read_html() %>%
html_nodes("table")%>%
html_table(fill=TRUE)
HDI <- data.frame("Country","HDI","Category")
HDI<-rbind(bindData(4,HDI_table,"Very high human development"),
bindData(7,HDI_table,"High human development"),
bindData(10,HDI_table,"Medium human development"),
bindData(13,HDI_table,"Low human development"))
View(HDI)
class(HDI_table)
HDI_table[1]
View(HDI)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(knitr)
library(rvest)
library(XML)
library(RCurl)
library(plyr)
library(stringr)
procrastination_data <- read.csv("Data/Procrastination.csv",stringsAsFactors = FALSE)
kable(dim(procrastination_data), header = "Dimension of procrastination dataset")
#a function that removes all of the periods from variable names and makes the name into Camel Case form.
camel <- function(x){ #function for camel case
capit <- function(x) paste0(toupper(substring(x, 1, 1)), substring(x, 2, nchar(x)))
sapply(strsplit(x, "\\."), function(x) paste(capit(x), collapse=""))
}
names(procrastination_data)<-camel(names(procrastination_data))
#a manual update of variable names that are too long or not descriptive.
procrastination_data<- rename(x=procrastination_data,replace=c("HowLongHaveYouHeldThisPositionYears"="ExpYears", "Edu"="Education",
"CountryOfResidence"="Country",
"ÏAge"="Age",
"HowLongHaveYouHeldThisPositionMonths"="ExpMonths",
"DoYouConsiderYourselfAProcrastinator"="SelfQuestion",
"NumberOfDaughters" = "Daughters",
"NumberOfSons" = "Sons",
"CurrentOccupation"="Job",
"CommunitySize"="Community",
"MaritalStatus"="Marital",
"DoOthersConsiderYouAProcrastinator"="OthQuestion",
"AnnualIncome"="Income"))
#This will rename the columns of the different questionnaires
colnames(procrastination_data)[grep(names(procrastination_data),pattern = "GP")] <- sprintf("GPQues%d",1:length(grep(names(procrastination_data),pattern = "GP")))
colnames(procrastination_data)[grep(names(procrastination_data),pattern = "AIP")] <- sprintf("AIPQues%d",1:length(grep(names(procrastination_data),pattern = "AIP")))
colnames(procrastination_data)[grep(names(procrastination_data),pattern = "SWLS")] <- sprintf("SWLSQues%d",1:length(grep(names(procrastination_data),pattern = "SWLS")))
colnames(procrastination_data)[grep(names(procrastination_data),pattern = "DP")] <- sprintf("DPQues%d",1:length(grep(names(procrastination_data),pattern = "DP")))
#Years of experience
#For years of experience any unrealistic value or null value is assigned
procrastination_data$ExpYears <-as.numeric(procrastination_data$ExpYears)
procrastination_data$ExpYears[procrastination_data$ExpYears==999 | is.na(procrastination_data$ExpYears)] <- 0
procrastination_data$ExpYears <- round(procrastination_data$ExpYears,digits=1)
#We are replacing mis identified
procrastination_data$Job[procrastination_data$Job=="0"] <- ""
#Any blank income is assigned a value of 0
procrastination_data$Income[is.na(procrastination_data$Income)] <- 0
procrastination_data$Sons[procrastination_data$Sons=="Male"] <- "1"
procrastination_data$Sons[procrastination_data$Sons=="Female"] <- "2"
#The Kids data is updated to only Yes or no
procrastination_data$Kids <- ifelse(grepl(procrastination_data$Kids,pattern = "Yes"),"Yes","No")
#We are truncating all values of age after the decimal
procrastination_data$Age <- trunc(procrastination_data$Age,digits=0)
#This is to replace all 0 values of Country with an empty string
procrastination_data$Country[procrastination_data$Country=="0"] <- ""
#Any blank answers in the procrastination questionnaires are assigned a Yes value
procrastination_data$OthQuestion[procrastination_data$OthQuestion==""] <- "Yes"
procrastination_data$SelfQuestion[procrastination_data$SelfQuestion==""] <- "Yes"
#Here we are greping all of the variables with certain criteria in their names and creating a new variable of the mean of variables
procrastination_data$GPMean <- rowMeans(procrastination_data[,grep(names(procrastination_data),pattern = "GP")])
procrastination_data$AIPMean <- rowMeans(procrastination_data[,grep(names(procrastination_data),pattern = "AIP")])
procrastination_data$SWLSMean <- rowMeans(procrastination_data[,grep(names(procrastination_data),pattern = "SWLS")])
procrastination_data$DPMean <- rowMeans(procrastination_data[,grep(names(procrastination_data),pattern = "DP")])
#We are rounding the characters to only 1 digit after the decimal
procrastination_data$GPMean <- round(procrastination_data$GPMean,digits=1)
procrastination_data$AIPMean <- round(procrastination_data$AIPMean,digits=1)
#Any job title where the person filled in please specify is made into an empty string.
procrastination_data$Job[grep(procrastination_data$Job,pattern = "please specify")] <- ""
#All students are titled as student. As well if someone put their work status as Student then their occupation was updated to student
procrastination_data$Job[grep(procrastination_data$WorkStatus,pattern = "[sS]tudent")] <- "Student"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[sS]tudent")] <- "Student"
#These are statements to make professional job titles more general, i.e. yoga teacher and ESL teacher were simplified to teacher
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[tT]eacher")] <- "Teacher"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[wW]riter")] <- "Writer"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "RN|[nN]urse|LPN|PCA")] <- "Nurse"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[cC][ ]*[eE][ ]*[oO]")] <- "Chief Executive"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "IT")] <- "Information Technology"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[dD]octor|[mM][dD]")] <- "Doctor"
procrastination_data$Job[grep(procrastination_data$Job,pattern = "[sS]ales")] <- "Sales"
#Everyone with a job status of Unemployed with a blank occupation is assigned the value Unemployed for their occupation
procrastination_data$Job[procrastination_data$WorkStatus=="unemployed"& procrastination_data$Job==""] <- "Unemployed"
#All Job titles under 5 characters were made to an empty string
procrastination_data$Job[nchar(procrastination_data$Job)<5] <- ""
#All jobs with a slash(/) had all text after the slash removed
procrastination_data$Job<-sub("\\s*/.*", "", procrastination_data$Job)
#All jobs with parantheses had the parantheses removed
procrastination_data$Job<-sub("\\s*\\(.*", "", procrastination_data$Job)
#All jobs with leading and trailing white space were trimmed
procrastination_data$Job<-gsub("^\\s+|\\s+$", "", procrastination_data$Job)
#This is a function to combine multiple tables of scraped data that share a similar category
bindData <- function(firstframe,dataset,category){
#Here we are assigning the columns we need to some temporary variables and renaming the columns
working_temp <- dataset[[firstframe]][2:nrow(dataset[[firstframe]]),c(3,4)]
names(working_temp)<-c("Country","HDI")
working_temp1 <- dataset[[firstframe+1]][2:nrow(dataset[[firstframe+1]]),c(3,4)]
names(working_temp1)<-c("Country","HDI")
#We are binding the rows of our two temp variables and adding the Category value.
working_temp<-rbind(working_temp,working_temp1)
working_temp<-cbind(working_temp,"Category"=category)
}
url <- "https://en.wikipedia.org/wiki/List_of_countries_by_Human_Development_Index"
HDI_table <- url %>%
read_html() %>%
html_nodes("table")%>%
html_table(fill=TRUE)
HDI <- data.frame("Country","HDI","Category")
HDI<-rbind(bindData(4,HDI_table,"Very high human development"),
bindData(7,HDI_table,"High human development"),
bindData(10,HDI_table,"Medium human development"),
bindData(13,HDI_table,"Low human development"))
#We are doing a left merge of the procrastination data on the HDI data pulled from wikipedia. This means that if there is a missing country value from the procrastination data we will still bring that data over with missing HDI information.
merged_data<-merge(x=procrastination_data,y=HDI,by="Country",all.x=TRUE)
cleaned_data <- merged_data[merged_data$Age>18 & !is.na(merged_data$Age),]
frequencyOfRespondantsByGender <- as.data.frame(table(cleaned_data$Gender))
colnames(frequencyOfRespondantsByGender) <- c("Gender","Number of Participants")
kable(frequencyOfRespondantsByGender[order(-frequencyOfRespondantsByGender$`Number of Participants`),],row.names = FALSE)
frequencyOfRespondantsByCountry <- as.data.frame(table(cleaned_data$Country))
colnames(frequencyOfRespondantsByCountry) <- c("Country","Number of Participants")
kable(frequencyOfRespondantsByCountry[order(-frequencyOfRespondantsByCountry$`Number of Participants`),],row.names = FALSE)
View(procrastination_data)
View(merged_data)
